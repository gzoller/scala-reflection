package co.blocke.scala_reflection

import munit.*
import models.*
import co.blocke.reflect.* 

class Java extends munit.FunSuite:

  // test("Simple parameter substitution") {
  //   val result = RType.of[JavaParam[String]]
  //   println(result)
  //   assertEquals( result.pretty, """co.blocke.scala_reflection.models.InheritSimpleChild:
  //     |   fields ->
  //     |      extra: String
  //     |      one: String
  //     |         annotations -> Map(co.blocke.reflect.Change -> Map(name -> uno), co.blocke.reflect.DBKey -> Map(index -> 50))
  //     |   non-constructor fields (non-case class) ->
  //     |      dontForget: Int
  //     |      foo: Int
  //     |         annotations -> Map(co.blocke.reflect.DBKey -> Map(index -> 99))
  //     |      four: Double
  //     |         annotations -> Map(co.blocke.reflect.DBKey -> Map(index -> 2), co.blocke.reflect.Change -> Map(name -> quatro))
  //     |      three: Boolean
  //     |      two: Int
  //     |         annotations -> Map(co.blocke.reflect.Change -> Map(name -> foobar), co.blocke.reflect.DBKey -> Map(index -> 1))
  //     |""".stripMargin)
  // }

  test("Nested Java classes") {
    println("WOOO: "+Class.forName("co.blocke.reflect.Hey"))
    val result = RType.of[co.blocke.reflect.You]
    println(result)
    assertEquals( result.pretty, """JavaClassInfo(co.blocke.reflect.You):
    |   fields:
    |      (0) sayHey: JavaClassInfo(co.blocke.reflect.Hey):
    |         fields:
    |            (0) jString: java.lang.String
    |""".stripMargin)
  }