java.lang.AssertionError: assertion failed: NoType
occurred in the presentation compiler.

action parameters:
offset: 571
uri: file://<WORKSPACE>/src/main/scala/co.blocke.scala_reflection/exprs/ExprMaster.scala
text:
package co.blocke.scala_reflection
package exprs

import scala.quoted.*
import rtypes.*

/*
Master object that creates all RType[T] Expr's.  Feed it an RType[T] and await the Expr[T].
When building Expr[T]s for classes there will likely be lots of recursion, so this is the
safe common entry point for whenever you need to descend into an RType to make an Expr.
*/

object ExprMaster:

  protected[exprs] val exprCache = scala.collection.mutable.Map.empty[String, quoted.Type[_]]

  def registerPrimitives( m: Map[String, RType[_]] )(using q:Qutoes): Unit = 
    m.map{ c@@}

  def makeExpr[T](rt: RType[T])(using q:Quotes)(using Type[T]): Expr[RType[T]] = 
    rt match {
      case primitive: PrimitiveRType => Primitives.makeExpr(primitive)
      // case clazz: ClassRType[T] => Classes.makeExpr(clazz)
      // case typeMember: TypeMemberRType[T] => TypeMember.makeExpr(typeMember)
      // case unknown: UnknownRType => '{ UnknownRType( ${Expr(unknown.name)} ).asInstanceOf[RType[T]] }
    }

/*
  def makeFieldExpr[T]( fieldInfo: FieldInfo[T] )(using q:Quotes)(using Type[T]): Expr[FieldInfo[T]] =
    import q.reflect.*
    import Liftables.OptTypeSymbolToExpr

    println("Making field: "+fieldInfo.name)
    val fi = fieldInfo.asInstanceOf[ScalaFieldInfo[T]]
    val typedFieldInfo = fi.fieldType.asInstanceOf[RType[fi.fieldType.T]]
    val tt = fi.fieldType.toType(quotes).asInstanceOf[Type[fi.fieldType.T]]
    val fieldTypeExpr = ExprMaster.makeExpr(typedFieldInfo)(using quotes)(using tt).asInstanceOf[Expr[RType[fi.fieldType.T]]]
    println("Ready field: "+fieldInfo.name)
 
    '{ 
      ScalaFieldInfo[T](
        ${Expr(fi.index)}, 
        ${Expr(fi.name)},
        ${ fieldTypeExpr }, 
        ${Expr(fi.annotations)}, 
        // ${Expr(fi.defaultValueAccessorName)}, 
        // ${Expr(fi.originalSymbol)},
        // ${Expr(fi.isNonValConstructorField)}
     ).asInstanceOf[FieldInfo[T]]
    }
    */



error stacktrace:
scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:8)
	dotty.tools.dotc.core.Types$TypeBounds.<init>(Types.scala:5097)
	dotty.tools.dotc.core.Types$AliasingBounds.<init>(Types.scala:5176)
	dotty.tools.dotc.core.Types$TypeAlias.<init>(Types.scala:5198)
	dotty.tools.dotc.core.Types$TypeAlias$.apply(Types.scala:5231)
	dotty.tools.dotc.core.Types$Type.bounds(Types.scala:1729)
	scala.meta.internal.pc.completions.CaseKeywordCompletion$.contribute(MatchCaseCompletions.scala:154)
	scala.meta.internal.pc.completions.Completions.advancedCompletions(Completions.scala:433)
	scala.meta.internal.pc.completions.Completions.completions(Completions.scala:183)
	scala.meta.internal.pc.completions.CompletionProvider.completions(CompletionProvider.scala:86)
	scala.meta.internal.pc.ScalaPresentationCompiler.complete$$anonfun$1(ScalaPresentationCompiler.scala:119)
